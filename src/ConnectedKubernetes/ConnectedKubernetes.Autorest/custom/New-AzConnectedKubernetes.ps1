
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
API to register a new Kubernetes cluster and create a tracked resource in Azure Resource Manager (ARM).
.Description
API to register a new Kubernetes cluster and create a tracked resource in Azure Resource Manager (ARM).
.Example
New-AzConnectedKubernetes -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -Location eastus
.Example
New-AzConnectedKubernetes -ClusterName azps_test_cluster1 -ResourceGroupName azps_test_group -Location eastus -KubeConfig $HOME\.kube\config -KubeContext azps_aks_t01

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Models.Api20240701Preview.IConnectedCluster
.Link
https://learn.microsoft.com/powershell/module/az.connectedkubernetes/new-azconnectedkubernetes
#>
function New-AzConnectedKubernetes {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Models.Api20240701Preview.IConnectedCluster])]
    [CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
    param(
        [Parameter(Mandatory)]
        [Alias('Name')]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Path')]
        [System.String]
        # The name of the Kubernetes cluster on which get is called.
        ${ClusterName},

        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Path')]
        [System.String]
        # The name of the resource group.
        # The name is case insensitive.
        ${ResourceGroupName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
        [System.String]
        # The ID of the target subscription.
        ${SubscriptionId},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Path')]
        [System.Uri]
        # The http URI of the proxy server for the kubernetes cluster to use
        ${HttpProxy},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Path')]
        [System.Uri]
        # The https URI of the proxy server for the kubernetes cluster to use
        ${HttpsProxy},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Path')]
        [System.String]
        # The comma-separated list of hostnames that should be excluded from the proxy server for the kubernetes cluster to use
        ${NoProxy},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Path')]
        [System.String]
        # The path to the certificate file for proxy or custom Certificate Authority.
        ${ProxyCert},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Path')]
        [ValidateRange(0,3600)]
        [Int]
        # The time required (in seconds) for the arc-agent pods to be installed on the kubernetes cluster.
        ${OnboardingTimeout} = 600,

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Path')]
        [System.Management.Automation.SwitchParameter]
        # Flag to disable auto upgrade of arc agents.
        ${DisableAutoUpgrade},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Path')]
        [System.String]
        # Override the default container log path to enable fluent-bit logging.
        ${ContainerLogPath},

        [Parameter(HelpMessage="Path to the kube config file")]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Body')]
        [System.String]
        # Path to the kube config file
        ${KubeConfig},

        [Parameter(HelpMessage="Kubconfig context from current machine")]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Body')]
        [System.String]
        # Kubconfig context from current machine
        ${KubeContext},

        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Body')]
        [System.String]
        # The geo-location where the resource lives
        ${Location},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Support.AzureHybridBenefit])]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Support.AzureHybridBenefit]
        # Indicates whether Azure Hybrid Benefit is opted in
        ${AzureHybridBenefit},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Body')]
        [System.String]
        # The Kubernetes distribution running on this connected cluster.
        ${Distribution},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Body')]
        [System.String]
        # The Kubernetes distribution version on this connected cluster.
        ${DistributionVersion},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Body')]
        [System.String]
        # The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on.
        ${Infrastructure},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Body')]
        [System.String]
        # The resource id of the private link scope this connected cluster is assigned to, if any.
        ${PrivateLinkScopeResourceId},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Support.PrivateLinkState])]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Support.PrivateLinkState]
        # Property which describes the state of private link on a connected cluster resource.
        ${PrivateLinkState},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Support.ProvisioningState])]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Support.ProvisioningState]
        # Provisioning state of the connected cluster resource.
        ${ProvisioningState},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Models.Api20.ITrackedResourceTags]))]
        [System.Collections.Hashtable]
        # Resource tags.
        ${Tag},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Body')]
        [System.String]
        # OID of 'custom-locations' app.
        ${CustomLocationsOid},

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        # Accept EULA of ConnectedKubernetes, legal term will pop up without this parameter provided
        ${AcceptEULA},

        [Parameter()]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The credentials, account, tenant, and subscription used for communication with Azure.
        ${DefaultProfile},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command as a job
        ${AsJob},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command asynchronously
        ${NoWait},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Runtime')]
        [System.Uri]
        # The URI of the proxy server for host os to use
        ${Proxy},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # The credential of the proxy server for host os to use
        ${ProxyCredential},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials},

        [Parameter()]
        [ValidateSet("gateway", "direct")]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Runtime')]
        [System.String]
        # Azure connections are either direct or via an Arc Gateway
        ${ConnectionType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Category('Runtime')]
        [System.String]
        # Arc Gateway resource Id
        ${GatewayResoureceId}
    )

    process {
        . "$PSScriptRoot/helpers/HelmHelper.ps1"
        if($AzureHybridBenefit){
            if(!$AcceptEULA){
                $legalTermPath = Join-Path $PSScriptRoot -ChildPath "LegalTerm.txt"
                try {
                    $legalTerm = (Get-Content -Path $legalTermPath) -join "`r`n"
                } catch {
                    Write-Error "Get legal term failed."
                    throw
                }
                $confirmation = Read-Host $legalTerm"`n[Y] Yes  [N] No  (default is `"N`")"
                if($confirmation -ine "Y"){
                    Return
                }
            }
        }
        $null = $PSBoundParameters.Remove('AcceptEULA')


        if ($PSBoundParameters.ContainsKey('KubeConfig')) {
            $Null = $PSBoundParameters.Remove('KubeConfig')
        } elseif (Test-Path Env:KUBECONFIG) {
            $KubeConfig = Get-ChildItem -Path Env:KUBECONFIG
        } elseif (Test-Path Env:Home) {
            $KubeConfig = Join-Path -Path $Env:Home -ChildPath '.kube' | Join-Path -ChildPath 'config'
        } else {
            $KubeConfig = Join-Path -Path $Home -ChildPath '.kube' | Join-Path -ChildPath 'config'
        }
        if (-not (Test-Path $KubeConfig)) {
            Write-Error 'Cannot find the kube-config. Please make sure that you have the kube-config on your machine.'
            return
        }
        if ($PSBoundParameters.ContainsKey('KubeContext')) {
            $Null = $PSBoundParameters.Remove('KubeContext')
        }
        if (($null -eq $KubeContext) -or ($KubeContext -eq '')) {
            $KubeContext = kubectl config current-context
        }

        if ($PSBoundParameters.ContainsKey('ConnectionType')) {
            if ($ConnectionType.Equals("direct")) {
                if ($PSBoundParameters.ContainsKey('GatewayResourceId')) {
                    Write-Error 'GatewayResourceId should not be provided when ConnectionType is "direct".'
                    return
                }
            }
        }
        
        $CommonPSBoundParameters = @{}
        if ($PSBoundParameters.ContainsKey('HttpPipelineAppend')) {
            $CommonPSBoundParameters['HttpPipelineAppend'] = $HttpPipelineAppend
        }
        if ($PSBoundParameters.ContainsKey('HttpPipelinePrepend')) {
            $CommonPSBoundParameters['HttpPipelinePrepend'] = $HttpPipelinePrepend
        }
        if ($PSBoundParameters.ContainsKey('SubscriptionId')) {
            $CommonPSBoundParameters['SubscriptionId'] = $SubscriptionId
        }
        if ($PSBoundParameters.ContainsKey('PrivateLinkState') -and ($null -ne $CustomLocationsOid) -and ($CustomLocationsOid -ne '')) {
            Write-Warning "The features 'cluster-connect' and 'custom-locations' cannot be enabled for a private link enabled connected cluster."
            $CustomLocationsOid = $null
        }
        if ($PSBoundParameters.ContainsKey('CustomLocationsOid')) {
            $Null = $PSBoundParameters.Remove('CustomLocationsOid')
        }
        $IdentityType = [Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Support.ResourceIdentityType]::SystemAssigned
        $PSBoundParameters.Add('IdentityType', $IdentityType)

        #Region check helm install
        try {
            Set-HelmClientLocation
            $HelmVersion = helm version --template='{{.Version}}' --kubeconfig $KubeConfig
            if ($HelmVersion.Contains("v2")) {
                Write-Error "Helm version 3+ is required. Learn more at https://aka.ms/arc/k8s/onboarding-helm-install"
                return
            }
            $HelmVersion = helm version --short --kubeconfig $KubeConfig
            if ($HelmVersion.Substring(1,$HelmVersion.Length-1) -ge [System.Version]"3.7") {
                Write-Error "Helm version larger then 3.7 cannot pull that chart azure-arc. Please use 3.6. Learn more at https://aka.ms/arc/k8s/onboarding-helm-install"
                Return
            }
        } catch {
            throw "Helm version 3+ is required. Learn more at https://aka.ms/arc/k8s/onboarding-helm-install"            
        }
        #EndRegion

        #Region get release namespace
        $ReleaseInstallNamespace = Get-ReleaseInstallNamespace
        $ReleaseNamespace = $null
        try {
            $ReleaseNamespace = (helm status azure-arc -o json --kubeconfig $KubeConfig --kube-context $KubeContext -n $ReleaseInstallNamespace | ConvertFrom-Json).namespace
        } catch {
            Write-Error "Fail to find the namespace for azure-arc."
        }
        #Endregion

        if ($null -ne $ReleaseNamespace) {
            # !!PDS: Is this a bug?  "--namespace $ReleaseNamespace" surely?
            $Configmap = kubectl get configmap --namespace azure-arc azure-clusterconfig -o json --kubeconfig $KubeConfig | ConvertFrom-Json
            $ConfigmapRgName = $Configmap.data.AZURE_RESOURCE_GROUP
            $ConfigmapClusterName = $Configmap.data.AZURE_RESOURCE_NAME
            try {
                $ExistConnectedKubernetes = Get-AzConnectedKubernetes -ResourceGroupName $ConfigmapRgName -ClusterName $ConfigmapClusterName @CommonPSBoundParameters
        
                if (($ResourceGroupName -eq $ConfigmapRgName) -and ($ClusterName -eq $ConfigmapClusterName)) {
                    # !!PDS: Looks like this performs a re-PUT of an existing connected cluster.
                    $PSBoundParameters.Add('AgentPublicKeyCertificate', $ExistConnectedKubernetes.AgentPublicKeyCertificate)
                    return Az.ConnectedKubernetes.internal\New-AzConnectedKubernetes @PSBoundParameters
                } else {
                    # # !!PDS: We have a cluster something with the same Kubernetes settings but already associated via a different RG - error!
                    Write-Error "The kubernetes cluster you are trying to onboard is already onboarded to the resource group '${ConfigmapRgName}' with resource name '${ConfigmapClusterName}'."
                }
                return
            } catch {
                # This is attempting to delete Azure Arc resources that are orphaned.
                # !!PDS: Why would we do this?  Surely we should not be deleting existing resources?
                helm delete azure-arc --namespace $ReleaseNamespace --kubeconfig $KubeConfig --kube-context $KubeContext
            }
        }

        if ((Test-Path Env:HELMREPONAME) -and (Test-Path Env:HELMREPOURL)) {
            $HelmRepoName = Get-ChildItem -Path Env:HELMREPONAME
            $HelmRepoUrl = Get-ChildItem -Path Env:HELMREPOURL
            helm repo add $HelmRepoName $HelmRepoUrl --kubeconfig $KubeConfig --kube-context $KubeContext
        }
        
        $resources = Get-Module Az.Resources -ListAvailable
        if ($null -eq $resources) {
            Write-Error "Missing required module(s): Az.Resources. Please run 'Install-Module Az.Resources -Repository PSGallery' to install Az.Resources."
            return
        }
        if (Test-Path Env:HELMREGISTRY) {
            $RegisteryPath = Get-ChildItem -Path Env:HELMREGISTRY
        } else {
            $ReleaseTrain = ''
            if ((Test-Path Env:RELEASETRAIN) -and (Test-Path Env:RELEASETRAIN)) {
                $ReleaseTrain = Get-ChildItem -Path Env:RELEASETRAIN
            } else {
                $ReleaseTrain = 'stable'
            }
            $AzLocation = Get-AzLocation | Where-Object { ($_.DisplayName -ieq $Location) -or ($_.Location -ieq $Location)}
            $Region = $AzLocation.Location
            if ($null -eq $Region) {
                Write-Error "Invalid location: $Location"
                return
            } else {
                $Location = $Region
            }            
            $ChartLocationUrl = "https://${Location}.dp.kubernetesconfiguration.azure.com/azure-arc-k8sagents/GetLatestHelmPackagePath?api-version=2019-11-01-preview&releaseTrain=${ReleaseTrain}"
        
            $Uri = [System.Uri]::New($ChartLocationUrl)
            $Account = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext.Account
            $Env = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureEnvironment]::PublicEnvironments[[Microsoft.Azure.Commands.Common.Authentication.Abstractions.EnvironmentName]::AzureCloud]
            $TenantId = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext.Tenant.Id
            $PromptBehavior = [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never
            $Token = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($account, $env, $tenantId, $null, $promptBehavior, $null)
            $AccessToken = $Token.AccessToken
        
            $HeaderParameter = @{
                "Authorization" = "Bearer $AccessToken"
            }

            # !!PDS This appears to be where we (might) query the configuration DP.
            # !!PDS: except we only seem to be requesting the helm chart registry path.
            $Response = Invoke-WebRequest -Uri $Uri -Headers $HeaderParameter -Method Post -UseBasicParsing
            if ($Response.StatusCode -eq 200) {
                $RegisteryPath = ($Response.Content | ConvertFrom-Json).repositoryPath
            } else {
                Write-Error "Error while fetching helm chart registry path: ${$Response.RawContent}"
                return
            }
        }
        Set-Item -Path Env:HELM_EXPERIMENTAL_OCI -Value 1
        #Region pull helm chart
        try {
            helm chart pull $RegisteryPath --kubeconfig $KubeConfig --kube-context $KubeContext
        } catch {
            throw "Unable to pull helm chart from the registery $RegisteryPath"            
        }
        #Endregion

        #Region export helm chart
        if (Test-Path Env:Home) {
            $ChartExportPath = Join-Path -Path (Get-Item Env:HOME).Value -ChildPath '.azure' | Join-Path -ChildPath 'AzureArcCharts'
            # $KubeConfig = Join-Path -Path $Env:Home -ChildPath '.kube' | Join-Path -ChildPath 'config'
        } else {
            $ChartExportPath = Join-Path -Path $Home -ChildPath '.azure' | Join-Path -ChildPath 'AzureArcCharts'
        }
        try {
            # !!PDS: Exporting a helm chart creates a local copy.
            helm chart export $RegisteryPath --kubeconfig $KubeConfig --kube-context $KubeContext --destination $ChartExportPath
        } catch {
            throw "Unable to export helm chart from the registery $RegisteryPath"
        }
        #Endregion

        $RSA = [System.Security.Cryptography.RSA]::Create(4096)
        if ($PSVersionTable.PSVersion.Major -eq 5) {
            try {
                . "$PSScriptRoot/helpers/RSAHelper.ps1"
                $AgentPublicKey = ExportRSAPublicKeyBase64($RSA)
                $AgentPrivateKey = ExportRSAPrivateKeyBase64($RSA)
                $AgentPrivateKey = "-----BEGIN RSA PRIVATE KEY-----`n" + $AgentPrivateKey + "`n-----END RSA PRIVATE KEY-----"                
            } catch {
                throw "Unable to generate RSA keys"
            }
        } else {
            $AgentPublicKey = [System.Convert]::ToBase64String($RSA.ExportRSAPublicKey())
            $AgentPrivateKey = "-----BEGIN RSA PRIVATE KEY-----`n" + [System.Convert]::ToBase64String($RSA.ExportRSAPrivateKey()) + "`n-----END RSA PRIVATE KEY-----"
        }

        $HelmChartPath = Join-Path -Path $ChartExportPath -ChildPath 'azure-arc-k8sagents'
        if (Test-Path Env:HELMCHART) {
            $ChartPath = Get-ChildItem -Path Env:HELMCHART
        } else {
            $ChartPath = $HelmChartPath
        }

        # !!PDS: Appears that we ignore the cluster config DP and generate
        #        config ourselves here.  This might be a change that we have to
        #        make as part of this work.
        # !!PDS: Add gateway stuff here?

        #Region helm options
        $options = ""
        $proxyEnableState = $false
        if (-not ([string]::IsNullOrEmpty($HttpProxy))) {
            $HttpProxyStr = $HttpProxy.ToString()
            $HttpProxyStr = $HttpProxyStr -replace ',','\,'
            $HttpProxyStr = $HttpProxyStr -replace '/','\/'
            $options += " --set global.httpProxy=$HttpProxyStr"
            $proxyEnableState = $true
            # !!PDS: Note how we are removing k8s parameters from the list of
            #        parameters to pass to the internal command.
            $Null = $PSBoundParameters.Remove('HttpProxy')
        }
        if (-not ([string]::IsNullOrEmpty($HttpsProxy))) {
            $HttpsProxyStr = $HttpsProxy.ToString()
            $HttpsProxyStr = $HttpsProxyStr -replace ',','\,'
            $HttpsProxyStr = $HttpsProxyStr -replace '/','\/'
            $options += " --set global.httpsProxy=$HttpsProxyStr"
            $proxyEnableState = $true
            $Null = $PSBoundParameters.Remove('HttpsProxy')
        }
        if (-not ([string]::IsNullOrEmpty($NoProxy))) {
            $NoProxy = $NoProxy -replace ',','\,'
            $NoProxy = $NoProxy -replace '/','\/'
            $options += " --set global.noProxy=$NoProxy"
            $proxyEnableState = $true
            $Null = $PSBoundParameters.Remove('NoProxy')
        }
        if ($proxyEnableState) {
            $options += " --set global.isProxyEnabled=true"
        }
        try {
            if ((-not ([string]::IsNullOrEmpty($ProxyCert))) -and (Test-Path $ProxyCert)) {
                $options += " --set-file global.proxyCert=$ProxyCert"
                $options += " --set global.isCustomCert=true"
            }
        } catch {
            throw "Unable to find ProxyCert from file path"            
        }
        if ($DisableAutoUpgrade) {
            $options += " --set systemDefaultValues.azureArcAgents.autoUpdate=false"
            $Null = $PSBoundParameters.Remove('DisableAutoUpgrade')
        }
        if (-not ([string]::IsNullOrEmpty($ContainerLogPath))) {
            $options += " --set systemDefaultValues.fluent-bit.containerLogPath=$ContainerLogPath"
            $Null = $PSBoundParameters.Remove('ContainerLogPath')
        }
        if (-not ([string]::IsNullOrEmpty($KubeConfig))) {
            $options += " --kubeconfig $KubeConfig"
        }
        if (-not ([string]::IsNullOrEmpty($KubeContext))) {
            $options += " --kube-context $KubeContext"
        }
        if (-not ([string]::IsNullOrEmpty($CustomLocationsOid))) {
            $options += " --set systemDefaultValues.customLocations.oid=$CustomLocationsOid"
            $options += " --set systemDefaultValues.customLocations.enabled=true"
        }
        if (!$NoWait) {
            $options += " --wait --timeout $OnboardingTimeout"
            $options += "s"
        }        
        #Endregion
        if ($PSBoundParameters.ContainsKey('OnboardingTimeout')) {
            $PSBoundParameters.Remove('OnboardingTimeout')
        }
        if ((-not ([string]::IsNullOrEmpty($Proxy))) -and (-not $PSBoundParameters.ContainsKey('ProxyCredential'))) {
            if (-not ([string]::IsNullOrEmpty($Proxy.UserInfo))) {
                try{
                    $userInfo = $Proxy.UserInfo -Split ':'
                    $pass = ConvertTo-SecureString $userInfo[1] -AsPlainText -Force
                    $ProxyCredential = New-Object System.Management.Automation.PSCredential ($userInfo[0] , $pass)
                    $PSBoundParameters.Add('ProxyCredential', $ProxyCredential)
                } catch {
                    throw "Please set ProxyCredential or provide username and password in the Proxy parameter"                    
                }
            } else {
                Write-Warning "If the proxy is a private proxy, pass ProxyCredential parameter or provide username and password in the Proxy parameter"
            }
        }

        # !!PDS: Check the health of the config DP before we proceed.
        # Perform DP health check

        $valuesFile = Get-ValuesFile
        $armMetadata = Get-Metadata -ArmEndpoint 'https://azure.com'
        $configDpinfo = Get-ConfigDPEndpoint -location $Location -valuesFile $valuesFile -armMetadata $armMetadata
        $configDPEndpoint = $configDpInfo.configDPEndpoint

        Invoke-HealthCheckDP -configDPEndpoint $configDPEndpoint

        # !!PDS: Here is the spot where we send the configuration to Azure.
        $PSBoundParameters.Add('AgentPublicKeyCertificate', $AgentPublicKey)
        $Response = Az.ConnectedKubernetes.internal\New-AzConnectedKubernetes @PSBoundParameters

        # !!PDS: Query the config DP for the helm chart registry path etc.
        # !!PDS: What below comes from the config DP and what comes as input?


        # Retrieving Helm chart OCI (Open Container Initiative) Artifact location
        $helmValuesDp = Get-HelmValues -cmd $cmd -configDPEndpoint $configDPEndpoint -releaseTrain $ReleaseTrain -requestBody $Response

        # Allow a custom OCI registry to be set via environment variables.
        # !!PDS: Where are these variables documented?  Should they be?
        $registryPath = if ($env:HELMREGISTRY) { $env:HELMREGISTRY } else { $helmValuesDp.repositoryPath }

        $helmContentValues = $helmValuesDp["helmValuesContent"]

        # !!PDS: Is there any telemetry in Powershell cmdlets?  
        # # Get azure-arc agent version for telemetry
        # azure_arc_agent_version = registry_path.split(":")[1]
        # telemetry.add_extension_event(
        #     "connectedk8s",
        #     {"Context.Default.AzureCLI.AgentVersion": azure_arc_agent_version},
        # )

        # Get helm chart path (within the OCI registry).
        $chartPath = Get-ChartPath -registryPath $registryPath -kubeConfig $KubeConfig -kubeContext $KubeContext -helmClientLocation $HelmClientLocation

        # Substitute any protected helm values as the value for that will be null
        foreach ($item in $protectedHelmValues.GetEnumerator()) {
            $helmContentValues[$item.Key] = $item.Value
        }            

        # !!PDS Aren't we supposed to read the helm config from the Cluster Config DP?
        # !!PDS: I think we might have done above, but why are we setting many options?
        $TenantId = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext.Tenant.Id        
        try {
            helm upgrade `
            --install azure-arc `
            $ChartPath `
            --namespace $ReleaseInstallNamespace `
            --create-namespace `
            --set global.subscriptionId=$SubscriptionId `
            --set global.resourceGroupName=$ResourceGroupName `
            --set global.resourceName=$ClusterName `
            --set global.tenantId=$TenantId `
            --set global.location=$Location `
            --set global.onboardingPrivateKey=$AgentPrivateKey `
            --set systemDefaultValues.spnOnboarding=false `
            --set global.azureEnvironment=AZUREPUBLICCLOUD `
            --set systemDefaultValues.clusterconnect-agent.enabled=true `
            --set global.kubernetesDistro=$Distribution `
            --set global.kubernetesInfra=$Infrastructure (-split $options)

        # !!PDS: How does the above match up against this from the az cli?
        # !!PDS: Stuff that is not obvouus gets expanded into the request body
        #        but how does this happen normally?  Not clear how these values
        #        are all expanded.  e.g. "helm_content_values"?
        # !!PDS: At least some of this is protected/unprotected values (which are new?).
        # utils.helm_install_release(
        #     cmd.cli_ctx.cloud.endpoints.resource_manager,
        #     chart_path,
        #     kubernetes_distro,        Yes, global.KuberetesDistro
        #     kubernetes_infra,         Yes, global.KubernetesInfra
        #     location,                 Yes, global.Location
        #     private_key_pem,          Yes, global.OnboardingPrivateKey
        #     kube_config,              Passed verbatim as "--kubeconfig" but how above?
        #     kube_context,             Ditto.
        #     no_wait,                  Controls whether timeout applies - see below.
        #     values_file,              "-f" option to helm command.
        #     azure_cloud,              Maybe, global.AzureEnvironment
        #     enable_custom_locations,  Works with/against private link?
        #     custom_locations_oid,     Works with/against private link?
        #     helm_client_location,     This is the actual help client to run!
        #     enable_private_link,      Works with/against custom locations?
        #     arm_metadata,             Seems to define endpoints etc and get added as set values.
        #     onboarding_timeout,       Sets a "--wait, --timeout" options to command if not "nowait".
        #     helm_content_values,      Expanded as "set <thing>=<whotsit>" values; required?
        #     )

        } catch {
            throw "Unable to install helm chart at $ChartPath"
        }
        Return $Response
    }
}

function Invoke-HealthCheckDP {
    param (
        [object]$cmd,
        [string]$configDPEndpoint
    )

    # Setting uri
    $apiVersion = "2024-07-01-preview"
    $chartLocationUrlSegment = "azure-arc-k8sagents/healthCheck?api-version=$apiVersion"
    $chartLocationUrl = "$configDPEndpoint/$chartLocationUrlSegment"
    $uriParameters = @()
    # $resource = $cmd.cli_ctx.cloud.endpoints.active_directory_resource_id
    $resource = 'https://management.core.windows.net/'
    $headers = $null
    if ($env.Contains('AZURE_ACCESS_TOKEN')) {
        $headers = @{"Authorization"="Bearer $($env['AZURE_ACCESS_TOKEN'])"}
    }

    # Sending request with retries
    $r = Invoke-RestMethodWithRetries -method 'post' -url $chartLocationUrl -headers $headers -faultType $consts.Get_HelmRegistery_Path_Fault_Type -summary 'Error while performing DP health check' -uriParameters $uriParameters -resource $resource
    if ($r.StatusCode -eq 200) {
        Write-Output "Health check for DP is successful."
        return $true
    }
    else {
        [Microsoft.Azure.Commands.Common.Exceptions.CLIInternalError]::new("Error while performing DP health check")
    }
    if ($r.StatusCode -eq 200) {
        Write-Output "Health check for DP is successful."
        return $true
    }
    else {
        [Microsoft.Azure.Commands.Common.Exceptions.CLIInternalError]::new("Error while performing DP health check")
    }
}

# def get_helm_values(cmd, config_dp_endpoint, release_train_custom=None, request_body=None):
#     # Setting uri
#     api_version = "2024-07-01-preview"
#     chart_location_url_segment = "azure-arc-k8sagents/GetHelmSettings?api-version={}".format(api_version)
#     release_train = os.getenv('RELEASETRAIN') if os.getenv('RELEASETRAIN') else 'stable'
#     chart_location_url = "{}/{}".format(config_dp_endpoint, chart_location_url_segment)
#     if release_train_custom:
#         release_train = release_train_custom
#     uri_parameters = ["releaseTrain={}".format(release_train)]
#     resource = cmd.cli_ctx.cloud.endpoints.active_directory_resource_id
#     headers = None
#     if os.getenv('AZURE_ACCESS_TOKEN'):
#         headers = ["Authorization=Bearer {}".format(os.getenv('AZURE_ACCESS_TOKEN'))]
#     # Sending request with retries
#     r = send_request_with_retries(cmd.cli_ctx, 'post', chart_location_url, headers=headers, fault_type=consts.Get_HelmRegistery_Path_Fault_Type, summary='Error while fetching helm chart registry path', uri_parameters=uri_parameters, resource=resource, request_body=request_body)
#     if r.content:
#         try:
#             return r.json()
#         except Exception as e:
#             telemetry.set_exception(exception=e, fault_type=consts.Get_HelmRegistery_Path_Fault_Type,
#                                     summary='Error while fetching helm values from DP')
#             raise CLIInternalError("Error while fetching helm values from DP from JSON response: " + str(e))
#     else:
#         telemetry.set_exception(exception='No content in response', fault_type=consts.Get_HelmRegistery_Path_Fault_Type,
#                                 summary='No content in acr path response')
#         raise CLIInternalError("No content was found in helm registry path response.")

function Invoke-RestMethodWithRetries {
    param ()
    # [string]$cli_ctx
    [string]$method
    [string]$url
    [string]$headers
    # [string]$faultType
    # [string]$summary
    [hashtable]$uriParameters
    [string]$resource
    [string]$requestBody = ""
    [integer]$retryCount = 5
    [integer]$retryDelay = 3

    $thisRetry = 0
    $success = $false

    # !!PDS: Are we going to have to reproduce the resource extraction logic and the CLI context?
    # !!PDS: We do somehow need to get an Azure token so need a resource ID from somewhere.
    # !!PDS: We are using this to access the Cluster Config DP so does that even have a 
    #        resource and does it require an Azure token?  Or do we base this on the 
    #        Arc connected cluster that we have created/are creating?

    # Add URI parameters to end of URL if there are any.
    if ($uriParameters.Count() -gt 0) {
        # Create an array by joining hash index and value using '=' and join them using '&'
        $uriParametersArray = $uriParameters.GetEnumerator() | ForEach-Object { "$($_.Key)=$($_.Value)" } | ForEach-Object { $_ -join '=' } | ForEach-Object { $_ -join '&' }
        $url = "$url?$uriParametersArray"
    }

    while (-not $success -and $thisRetry -lt $retryCount) {
        try {
            # response = send_raw_request(cli_ctx, method, url, headers=headers, uri_parameters=uri_parameters, resource=resource, body=request_body)
            $response = Invoke-RestMethod -Uri $url -Method $method -Headers $headers -Body $requestBody -ContentType "application/json"
            # Assuming success if no exception is thrown
            $success = $true
            Write-Output "Request successful."
        }
        catch {
            $thisCount++
            Write-Warning "Attempt $thisRetry of $retryCount failed: $_"
            Start-Sleep -Seconds $retryDelay
        }
    }

    if (-not $success) {
        throw "Failed to complete request after $retryCount attempts."
    }

    return $response
}


function Get-HelmValues {
    param (
        [object]$cmd,
        [string]$configDPEndpoint,
        [string]$releaseTrainCustom,
        [object]$requestBody
    )

    # Setting uri
    $apiVersion = "2024-07-01-preview"
    $chartLocationUrlSegment = "azure-arc-k8sagents/GetHelmSettings?api-version=$apiVersion"
    $releaseTrain = if ($env:RELEASETRAIN) { $env:RELEASETRAIN } else { "stable" }
    $chartLocationUrl = "$configDPEndpoint/$chartLocationUrlSegment"
    if ($releaseTrainCustom) {
        $releaseTrain = $releaseTrainCustom
    }
    $uriParameters = @("releaseTrain=$releaseTrain")

    # !!PDS: not clear how we reproduce this.  I guess this is a resource from somewhere?
    #        But ideally not the resource ID we started with?  Did it get updated?
    # !!PDS: Or perhaps we don't care for Powershell?  Does it set authentication via
    #        other methods?
    # $resource = $cmd.cli_ctx.cloud.endpoints.active_directory_resource_id
    $resource = 'https://management.core.windows.net/'
    $headers = $null
    if ($env.Contains('AZURE_ACCESS_TOKEN')) {
        $headers = @{Authorization = "Bearer $($env['AZURE_ACCESS_TOKEN'])"}
    }

    # Sending request with retries
    $r = Invoke-RestMethodWithRetries -method 'post' -url $chartLocationUrl -headers $headers -faultType $consts.Get_HelmRegistery_Path_Fault_Type -summary 'Error while fetching helm chart registry path' -uriParameters $uriParameters -resource $resource -requestBody $requestBody
    if ($r.StatusCode -ne 200) {
        # !!PDS: But this does nothing?  
        [Microsoft.Azure.Commands.Common.Exceptions.CLIInternalError]::new("Error while performing DP health check")
    }

    if ($r.content) {
        try {
            return $r.json()
        }
        catch {
            $exception = $_
            Set-TelemetryException -exception $exception -faultType $consts.Get_HelmRegistery_Path_Fault        
        }
    }
}

function Invoke-RawRequest {
    param (
        # [object]$cli_ctx,
        [string]$method,
        [string]$url,
        [hashtable]$headers = @{},
        [hashtable]$uri_parameters = @{},
        [string]$body,
        [bool]$skip_authorization_header = $false,
        [string]$resource,
        [string]$output_file,
        [string]$generated_client_request_id_name = 'x-ms-client-request-id'
    )

    # Import required modules
    Import-Module -Name 'Microsoft.PowerShell.Utility'

    # Initialize result as a case-insensitive hashtable
    $result = @{}

    # Process headers, if provided
    if ($null -eq $headers) {
        foreach ($header in $headers.GetEnumerator()) {
            try {
                # Attempt to parse header if it's in JSON format
                $temp = ConvertFrom-Json $header.Value
                foreach ($key in $temp.Keys) {
                    $result[$key] = $temp[$key]
                }
            }
            catch {
                # If not JSON, split by '=' and add to result
                $keyValue = $header.Value -split '=', 2
                $result[$keyValue[0]] = $keyValue[1]
            }
        }
    }

    # If Authorization header is already provided, don't bother with the token
    if ($result.ContainsKey('Authorization')) {
        $skip_authorization_header = $true
    }

    # !!PDS: Assume that using the Get-InvokeRest method will set the user-agent
    # accordingly so we do not need to do that here.
    # Handle User-Agent
    # !!PDS: This does not exist until we implement it!
    # $userAgents = @((Get-AzRestUserAgent))
    # 
    # # Borrow AZURE_HTTP_USER_AGENT from msrest
    # $envAdditionalUserAgent = 'AZURE_HTTP_USER_AGENT'
    # if ($env.ContainsKey($envAdditionalUserAgent)) {
    #     $userAgents += $env[$envAdditionalUserAgent]
    # }
    # 
    # # Custom User-Agent provided as command argument
    # if ($headers.ContainsKey('User-Agent')) {
    #     $userAgents += $headers['User-Agent']
    # }
    # $headers['User-Agent'] = $userAgents -join ' '
    # Set telemetry User-Agent
    # !!PDS: This does not exist until we write it!
    # Set-AzUserAgent -UserAgent $headers['User-Agent']

    if ($generatedClientRequestIdName) {
        $headers[$generatedClientRequestIdName] = [guid]::NewGuid().ToString()
    }

    # Try to figure out the correct content type
    if ($body) {
        try {
            $bodyObject = ConvertFrom-Json $body -ErrorAction Stop
            # Convert back to JSON to ensure Unicode characters are escaped
            $body = $bodyObject | ConvertTo-Json -Compress
            if (-not $headers.ContainsKey('Content-Type')) {
                $headers['Content-Type'] = 'application/json'
            }
        }
        catch {
            # If conversion fails, just pass and use the body as is
        }
    }

    # !!PDS: Not sure how this context gets set up and how we duplicate this.
    # Add telemetry - what is this for?  Logging?
    # $headers['CommandName'] = $cli_ctx.data['command']
    # if ($cli_ctx.data['safe_params']) {
    #     $headers['ParameterSetName'] = ($cli_ctx.data['safe_params'] -join ' ')
    # }

    $result = @{}
    foreach ($s in $uri_parameters.GetEnumerator()) {
        try {
            $temp = ConvertFrom-Json $s.Value -ErrorAction Stop
            foreach ($key in $temp.Keys) {
                $result[$key] = $temp[$key]
            }
        }
        catch {
            $keyValue = $s.Value -split '=', 2
            $result[$keyValue[0]] = $keyValue[1]
        }
    }
    $uri_parameters = if ($result.Count -gt 0) { $result } else { $null }

    # !!PDS: Again, need setting up!  Do we only expect ARM resource IDs?
    $endpoints = $cli_ctx.cloud.endpoints
    # If url is an ARM resource ID, like /subscriptions/xxx/resourcegroups/xxx?api-version=2019-07-01,
    # default to Azure Resource Manager.
    # https://management.azure.com + /subscriptions/xxx/resourcegroups/xxx?api-version=2019-07-01
    if (-not $url.Contains('://')) {
        # $url = $endpoints.resource_manager.TrimEnd('/') + $url
        # !!PDS: Should this be a "new global::System.Uri()"?
        $url = "https://management.azure.com//" + $url
    }

    # !!PDS: We do not expect customers to be doing anything like this with connected clusters.
    # !!PDS: Does imply that this is a general purpose function and heree might be more to trim!
    # # Replace common tokens with real values. It is for smooth experience if users copy and paste the url from
    # # Azure Rest API doc
    # # $cliProfile = [Azure.Cli.Core.Profile]::new($cli_ctx)
    # if ($url.Contains('{subscriptionId}')) {
    #     # $subscriptionId = if ($cli_ctx.data['subscription_id']) { $cli_ctx.data['subscription_id'] } else { $cliProfile.GetSubscriptionId() }
    #     $subscriptionId = if ($cli_ctx.data['subscription_id']) { $cli_ctx.data['subscription_id'] } else { Get-AzContext.Subscription }
    #     $url = $url.Replace('{subscriptionId}', $subscriptionId)
    # }

    # Prepare the Bearer token for `Authorization` header
    if (-not $skipAuthorizationHeader -and $url.ToLower().StartsWith('https://')) {
        # Prepare `resource` for `get_raw_token`
        if (-not $resource) {
            # !!PDS: Assume standard ARM endpoint (we already do above)
            # If url starts with ARM endpoint, like `https://management.azure.com/`,
            # use `active_directory_resource_id` for resource, like `https://management.core.windows.net/`.
            # This follows the same behavior as `azure.cli.core.commands.client_factory._get_mgmt_service_client`
            # if ($url.ToLower().StartsWith($endpoints.resource_manager.TrimEnd('/'))) {
                # !!PDS: But what is this?  Only if we have no resource ID, which I assume
                #        we do as we should have the resource group?  Maybe not if just named?
                # $resource = $endpoints.active_directory_resource_id
                $resource = 'https://management.core.windows.net/'
            # }
            # else {
            #     try {
            #         # Scan the URL for all known (at least to this tool) resource endpoints.
            #         $endpointProperties = [System.Linq.Enumerable]::Where([System.Type]::GetType("Microsoft.Azure.Commands.Profile.Models.PSAzureEnvironment").GetProperties(), { $args[0].Name -notmatch '^_' })
            #         foreach ($p in $endpointProperties) {
            #             $value = $p.GetValue($endpoints)
            #             if ($value -and $url.ToLower().StartsWith($value.ToLower())) {
            #                 # This is a resource for an endpoint that we recognise so we can accept it.
            #                 $resource = $value
            #                 break
            #             }
            #         }
            #     }
            #     catch {
            #         Write-Warning "Could not set the resource based on URL and endpoints."
            #     }
            # }
        }
        if ($resource) {
            # Prepare `subscription` for `get_raw_token`
            # If this is an ARM request, try to extract subscription ID from the URL.
            $tokenSubscription = $null
            if ($url.ToLower().StartsWith($endpoints.resource_manager.TrimEnd('/'))) {
                $tokenSubscription = Get-SubscriptionIdFromResourceId $url
            }
            if ($tokenSubscription) {
                Write-Debug "Retrieving token for resource $resource, subscription $tokenSubscription"
                $tokenInfo = Get-AzAccessToken -ResourceUrl $resource -SubscriptionId $tokenSubscription
            }
            else {
                Write-Debug "Retrieving token for resource $resource"
                $tokenInfo = Get-AzAccessToken -ResourceUrl $resource
            }
            $headers = if ($null -eq $headers) { @{} } else { $headers }
            $headers['Authorization'] = "$($tokenInfo.TokenType) $($tokenInfo.Token)"
        }
        else {
            Write-Warning "Can't derive appropriate Azure AD resource from --url to acquire an access token. If access token is required, use --resource to specify the resource."
        }
    }

    # Prepare the request
    $uri = $url + '?' + ($uri_parameters.GetEnumerator() | ForEach-Object { "$($_.Key)=$($_.Value)" }) -join '&'
    $method = $method.ToUpper()

    # !!PDS: Look for Write-Log... and similar
    # Log the request (assuming _LogRequest is a function you've defined to log requests)
    # _LogRequest $method, $uri, $headers, $body

    # Send the request
    $response = Invoke-RestMethod -Uri $uri -Method $method -Headers $headers -Body $body -WebSession $session -ContentType "application/json"

    # Log the response (assuming _LogResponse is a function you've defined to log responses)
    # !!PDS: Look for Write-Log... and similar
    # _LogResponse $response

    # Check for successful response
    if ($response.StatusCode -ne 200) {
        $reason = $response.ReasonPhrase
        if ($response.Content) {
            $reason += "($($response.Content))"
        }
        throw "HTTPError: $reason"
    }

    # If an output file is specified, save the response content to the file
    if ($outputFile) {
        $response.Content | Out-File -FilePath $outputFile -Encoding Byte
    }

    # Return the response
    return $response
}

function Get-SubscriptionIdFromResourceId {
    param (
        [parameter(mandatory=$true)]
        [string]$resourceId
    )

    # Split the URL based on "/"
    $resIdParts = $resourceId -split '/'

    # Find the index of "subscriptions" in $urlParts
    $subscriptionIndex = $resIdParts.IndexOf('subscriptions')

    # If "subscriptions" is not found, return $null
    if ($subscriptionIndex -eq -1) {
        return $null
    }

    # Return the value after "subscriptions"
    return $resIdParts[$subscriptionIndex + 1]
}

function Get-ConfigDpEndpoint {
    param (
        # [Parameter(Mandatory=$true)]
        # $Cmd,
        [Parameter(Mandatory=$true)]
        $Location,
        [Parameter(Mandatory=$true)]
        $ValuesFile,
        $ArmMetadata
    )

    $ReleaseTrain = $null
    $ConfigDpEndpoint = $null

    if (-not $ArmMetadata) {
        # !!PDS: Need to write this.
        $ArmMetadata = Get-Metadata -CloudEndpoint $Cmd.cli_ctx.cloud.endpoints.resource_manager
    }

    # !!PDS: No dogfood!
    # # Read and validate the helm values file for Dogfood.
    # if ($Cmd.cli_ctx.cloud.endpoints.resource_manager -eq $consts.Dogfood_RMEndpoint) {
    #     # !!PDS Need to write this.
    #     $result = Validate-EnvFileDogfood -ValuesFile $ValuesFile
    #     $ConfigDpEndpoint = $result.ConfigDpEndpoint
    #     $ReleaseTrain = $result.ReleaseTrain
    # }

    # Get the values or endpoints required for retrieving the Helm registry URL.
    if ($ArmMetadata.dataplaneEndpoints -and $ArmMetadata.dataplaneEndpoints.arcConfigEndpoint) {
        $ConfigDpEndpoint = $ArmMetadata.dataplaneEndpoints.arcConfigEndpoint
    }
    else {
        Write-Debug "'arcConfigEndpoint' doesn't exist under 'dataplaneEndpoints' in the ARM metadata."
    }

    # Get the default config dataplane endpoint.
    if (-not $ConfigDpEndpoint) {
        # !!PDS: Need to write this.
        $ConfigDpEndpoint = Get-DefaultConfigDpEndpoint -Cmd $Cmd -Location $Location
    }

    return @{ ConfigDpEndpoint = $ConfigDpEndpoint; ReleaseTrain = $ReleaseTrain }
}    

Function Get-Metadata {
    param (
        [string]$ArmEndpoint,
        [string]$ApiVersion = "2022-09-01"
    )

    $MetadataUrlSuffix = "/metadata/endpoints?api-version=$ApiVersion"
    $MetadataEndpoint = $null

    try {
        $MetadataEndpoint = $ArmEndpoint + $MetadataUrlSuffix
        $Response = Invoke-RestMethod -Uri $MetadataEndpoint -Method Get

        if ($Response.StatusCode -eq 200) {
            return $Response
        }
        else {
            $Msg = "ARM metadata endpoint '$MetadataEndpoint' returned status code $($Response.StatusCode)."
            throw $Msg
        }
    }
    catch {
        $Msg = "Failed to request ARM metadata $MetadataEndpoint."
        Write-Error "$Msg Please ensure you have network connection. Error: $_"
    }
}

# !!PDS: Not sure there will ever be one of these!
function Get-ValuesFile {
    # !!PDS: Review this syntax and used elsewhere?
    $valuesFile = $env:HELMVALUESPATH
    if ($null -ne $valuesFile -and (Test-Path $valuesFile)) {
        Write-Warning "Values file detected. Reading additional helm parameters from same."
        # Trimming required for Windows OS
        if ($valuesFile.StartsWith("'") -or $valuesFile.StartsWith('"')) {
            $valuesFile = $valuesFile.Substring(1)
        }
        if ($valuesFile.EndsWith("'") -or $valuesFile.EndsWith('"')) {
            $valuesFile = $valuesFile.Substring(0, $valuesFile.Length - 1)
        }
        return $valuesFile
    }
    return $null
}

function Get-HelmValues {
    param (
        [Parameter(Mandatory=$true)]
        $Cmd,
        [Parameter(Mandatory=$true)]
        $ConfigDpEndpoint,
        [string]$ReleaseTrainCustom,
        $RequestBody
    )

    # Setting uri
    $apiVersion = "2024-07-01-preview"
    $chartLocationUrlSegment = "azure-arc-k8sagents/GetHelmSettings?api-version=$apiVersion"
    $releaseTrain = if ($env:RELEASETRAIN) { $env:RELEASETRAIN } else { "stable" }
    $chartLocationUrl = "$ConfigDpEndpoint/$chartLocationUrlSegment"
    if ($ReleaseTrainCustom) {
        $releaseTrain = $ReleaseTrainCustom
    }
    $uriParameters = @("releaseTrain=$releaseTrain")
    $resource = $Cmd.cli_ctx.cloud.endpoints.active_directory_resource_id
    $headers = @{}
    if ($env:AZURE_ACCESS_TOKEN) {
        $headers["Authorization"] = "Bearer $($env:AZURE_ACCESS_TOKEN)"
    }

    # Sending request with retries
    try {
        # $r = Send-RequestWithRetries -CmdCtx $Cmd.cli_ctx -Method 'post' -Url $chartLocationUrl -Headers $headers -FaultType $consts.Get_HelmRegistery_Path_Fault_Type -Summary 'Error while fetching helm chart registry path' -UriParameters $uriParameters -Resource $resource -RequestBody $RequestBody
        $r = Invoke-RestMethodWithRetries -Method 'post' -Url $chartLocationUrl -Headers $headers -FaultType $consts.Get_HelmRegistery_Path_Fault_Type -Summary 'Error while fetching helm chart registry path' -UriParameters $uriParameters -Resource $resource -RequestBody $RequestBody
        if ($r.Content) {
            $responseJson = $r.Content | ConvertFrom-Json
            return $responseJson
        }
        else {
            [Microsoft.Azure.Commands.Common.Exceptions.CliInternalError]::new("No content was found in helm registry path response.")
        }
    }
    catch {
        $errorMessage = "Error while fetching helm values from DP from JSON response: $_"
        Write-Error $errorMessage
        throw $errorMessage
    }
}        

function Get-ChartPath {
    param (
        [string]$RegistryPath,
        [string]$KubeConfig,
        [string]$KubeContext,
        [string]$HelmClientLocation,
        [string]$ChartFolderName = 'AzureArcCharts',
        [string]$ChartName = 'azure-arc-k8sagents',
        [bool]$NewPath = $true
    )

    # Exporting Helm chart
    $ChartExportPath = Join-Path $env:USERPROFILE ('.azure', $ChartFolderName -join '\')
    try {
        if (Test-Path $ChartExportPath) {
            Remove-Item $ChartExportPath -Recurse -Force
        }
    }
    catch {
        Write-Warning "Unable to cleanup the $ChartFolderName already present on the machine. In case of failure, please cleanup the directory '$ChartExportPath' and try again."
    }

    Get-HelmChart -RegistryPath $RegistryPath -ChartExportPath $ChartExportPath -KubeConfig $KubeConfig -KubeContext $KubeContext -HelmClientLocation $HelmClientLocation -NewPath $NewPath -ChartName $ChartName

    # Returning helm chart path
    $HelmChartPath = Join-Path $ChartExportPath $ChartName
    if ($ChartFolderName -eq $consts.Pre_Onboarding_Helm_Charts_Folder_Name) {
        $ChartPath = $HelmChartPath
    }
    else {
        $ChartPath = if ($env:HELMCHART) { $env:HELMCHART } else { $HelmChartPath }
    }

    return $ChartPath
}

function Get-HelmChart {
    param (
        [string]$RegistryPath,
        [string]$ChartExportPath,
        [string]$KubeConfig,
        [string]$KubeContext,
        [string]$HelmClientLocation,
        [bool]$NewPath,
        [string]$ChartName = 'azure-arc-k8sagents',
        [int]$RetryCount = 5,
        [int]$RetryDelay = 3
    )

    $chartUrl = $RegistryPath.Split(':')[0]
    $chartVersion = $RegistryPath.Split(':')[1]

    if ($NewPath) {
        # Version check for stable release train (chart_version will be in X.Y.Z format as opposed to X.Y.Z-NONSTABLE)
        if (-not $chartVersion.Contains('-') -and ([version]$chartVersion -lt [version]"1.14.0")) {
            $errorSummary = "This CLI version does not support upgrading to Agents versions older than v1.14"
            # Assuming telemetry.set_exception and consts.Operation_Not_Supported_Fault_Type are handled elsewhere
            throw "Operation not supported on older Agents: $errorSummary"
        }

        $basePath = Split-Path $chartUrl -Parent
        $imageName = Split-Path $chartUrl -Leaf
        $chartUrl = "$basePath/v2/$imageName"
    }

    $cmdHelmChartPull = @($HelmClientLocation, "pull", "oci://$chartUrl", "--untar", "--untardir", $ChartExportPath, "--version", $chartVersion)
    if ($KubeConfig) {
        $cmdHelmChartPull += "--kubeconfig", $KubeConfig
    }
    if ($KubeContext) {
        $cmdHelmChartPull += "--kube-context", $KubeContext
    }

    for ($i = 0; $i -lt $RetryCount; $i++) {
        try {
            & $cmdHelmChartPull[0] $cmdHelmChartPull[1..($cmdHelmChartPull.Count - 1)]
            break
        }
        catch {
            if ($i -eq $RetryCount - 1) {
                # Assuming telemetry.set_exception and consts.Pull_HelmChart_Fault_Type are handled elsewhere
                throw "Unable to pull $ChartName helm chart from the registry '$RegistryPath': $_"
            }
            Start-Sleep -Seconds $RetryDelay
        }
    }
}